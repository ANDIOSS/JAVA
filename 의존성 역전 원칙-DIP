```java
public class 회계분석{
	private DateReader reader;
	
	public 회계분석() {}
	
	public 회계분석(DataReader reader) {
			this.reader = reader;
	}
	
	public void SetReader(DataReader reader){
		this.reader = reader;
}
	
	public void 보고서작성하기() {
	// DataReader 구현객체를 사용한다
	Data data = reader.read();
	// 획득한 Data 분석하고, 보고서 작성하기
	}
}     |
			| 밑에 코드에 의존
			5 
```

```java
public interface DataReader{   // 인터페이스
	Data read(); 
}
```

```java
	public class TextDataReader implements DataReader {     ^
	// 구현클래스																						| 2번째 코드 구현
	public Data read() {
	텍스트데이터를 읽어온다.
	텍스트데이터를 Data로 변환한다
	Data 객체를 반환한다
}
```

```java
public class ExcelDataReader implements DataReader{        ^
	public Data read(); {    // 구현클래스                    |2번째 코드 구현
	엑셀데이터를 읽어온다
	Data로 변환한다
	Data객체를 반환한다
	}
```

사용자 클래스가 의존하는 객체를 직접 생성하기

- 사용자 클래스에서 자신이 의존하는 객체를 new 키워드를 이용해서 직접 생성하는 방식이다.
- 의존하는 객체를 다른 객체로 변경하기 위해서는 사용자 클래스의 소스코드를 변경해야 한다.
- 사용자 클래스에서 직접 객체를 생성하기 때문에 사용자 클래스에 구현클래스의 이름이           등장한다.
    - 사용자 클래스와 구현클래스(여기서는 TextDataReader)간의 결합도가 높아진다.

```java
public class 회계분석 {
    // 사용자 클래스(회계분석)에서 의존하는(사용할) 객체를 직접 생성하였다.
    private DataReader reader = new TextDataReader();

    public 회계분석() {}

    public void 보고서작성() {
        // 데이터 읽어오기
        Data data = reader.read();
        // 데이터 분석하고 보고서 작성하기
    }
}
```

의존하는 객체를 제 3자로부터 제공받기(의존성 역전)

```java
public class 회계분석 {
	private DataReader reader;  //의존하는 객체를 직접 생성하지 않고 , 의존하는 객체가            
	                            //어떤 종류인지만 표시했다 DataReader 인터페이스를 구현한 
	                            //객체가 필요하다
	
	public 회계분석() {}
	public 회계분석(DataReader reader) {
		this.reader = reader;
	}

	public void setReader(DataReader reader) {
		this.reader = reader;
	}
	
	public void 보고서작성() {
		Data data = reader.read();
		//데이터 읽어오고, 분석하기
	}
}
```

```java
public class ExcelDataReader implements DataReader {
	public Data read() {
		엑셀에서 읽어서 Data로 변환해서 반환한다.
	}
}
```

```java
public class 제3자 {
	// 객체 생성 및 조립을 담당하는 제 3자가 있다.
	public static void main(String[] args) {
			// 애플리케이션 실행에 필요한 객체 생성
			ExceldataReader excel = new ExceldataReader();
			회계분석 app = new 회계분석();
			// 
	}
}
```

사용자 클래스는 자신이 의존하는 객체를 외부로부터 주입(전달) 받는다.

```java
public class Analyst {
		DataReader reader;
		
		public void setReader(DataReader reader) {
			this.reader = reader;
		}
		
		public void analyze() {
				reader.read();
		}
}
```

- Analyst는 자신이 의존하는 객체를 직접 생성하지 않는다.
- Analyst는 자신이 의존하는 객체를 생성자 메소드나 Setter 메소드를 통해서 외부로부터 제공받는다.
- Analyst가 자신이 의존하는 객체를 외부로부터 제공받기 위해서는
    1. 의존하는 객체가 조립될 참조변수의 타입을 인터페이스 타입으로 지정한다.
        1. 인터페이스타입의 변수는 해당 인터페이스를 구현한 모든객체를 참조할 수 있다.
        2. 다양한 구현객체가 조립 가능해진다.
        3. Analyst와 DataReader 구현객체간의 결합이 느슨해진다.
    2. 매개변수 있는 생성자 메소드나 setter 메소드를 정의한다.

```java
ExcelDataReader excel = new ExcelDataReader();
Analyst app = new Analyst();

app.setReader(excel); //Analyst객체에 ExcelDataReader 객체가 조립되는 코드이다.
```

객체지향 프로그래밍 언어는 재사용성이 높다.

상속

- 공통속성이나 공통기능이 정의된 부모클래스를 정의할 수 있다.
- 부모클래스를 재사용해서(상속받아서) 자식클래스를 빠르게 정의할 수 있다.

클래스는 설계도다.

- 하나의 클래스를 재사용해서 객체를 여러 개 생성할 수 있다.

객체지향 프로그래밍 언어로 작성된 프로그램은 보안성이 우수하다.

- 접근제한(캡슐화)
    - 객체의 상태 혹은 고유한 값을 외부 접근으로부터 감추고, 제공된 기능을 통해서만 간접적으로 이용할 수 있다.
    - 제공되는 기능에서는 입력값을 검증하고, 객체의 상태나 고유한 값에 대한 잘못된 접근을 차단할 수 있다.

객체지향 프로그래밍 언어로 작성된 프로그램은 유지 보수가 쉽고, 확장성이 뛰어나다.

- 추상화, 인터페이스, 제어역전
    - 추상화와 인터페이스를 이용하면 사용방법이 동일한 여러 구현객체를 작성할 수 있다.
    - 인터페이스를 이용하면 클래스와 클래스간의 관계를 느슨하게 결합할 수 있다.
    - 제어역전을 이용하면 자신이 의존하는 객체를 외부로부터 제공 받을 수 있다.
    - 즉, 기존 소스코드의 변경없이 자신이 의존하는 객체를 교체해 줌으로써 새 기능을 추가하거나 확장할 수 있다.
