형변환은 값을 다른 타입의 값으로 변환하는 것이다.
숫자만 문자 타입만 데이터 형변환이 가능하다.
boolean 불가능

형변환의 종류

자동 형변환
크기가 작은 타입의 값을 크기가 큰 타입의 값으로 변환하는 것은 자동으로 처리된다.
정밀도가 낮은 타입의 값을 정밀도가 높은 타입의 값으로 변환하는 것을 자동으로 처리된다.

수동 형변환
크기가 큰 타입의 값을 크기가 작은 타입의 값으로 변환하는 것은 개발자가 형변환 연산자가 지정해야 한다.
정밀도가 높은 타입의 값을 정밀도가 낮은 타입의 값으로 변환하는 것은 개발자가 형변환 연산자를 지정해야 한다.

연산이 일어날때는 같은 타입의 값으로 바꾸고서 가능하다
결과값도 같은 타입의 값으로만 나올 수 있다.
데이터의 손실이 없는 방향으로만 형변환이 가능하다 ex) 실수 - > 정수 불가능

ex
int a = 70.123에서 뒤에 123을 버리고 싶으면 int a = (int)70.123으로 바꾼다
int x = 2; ,int y = 10; 일때 x/y를 하면 둘 다 정수값이기 때문에 0이 나온다
이때 소수점 뒷자리를 얻고싶다면 (double)x/y를 쓴다면 소수점을 얻을 수 있다
값 앞이나 변수 앞에 바꾸고 싶은 타입을 적으면 된다
(타입)값 -> 값의 타입이 지정한 타입으로 변환된다
(타입) 변수명 -> 변수명으로 조회한 값이 지정한 타입으로 변환된다.
정수 -> 실수
정수 -> 문자
위에 두가지만 가능

대입연산자는 우선 순위가 제일 낮다
a + b는 2항 연산자
++a, --a 는 단항 연산자

두개 이상의 기준을 엮기 위하여 논리연산자를 사용함

삼항연산자(조건연산자) , 밑에서 ? , : 이 연산자임
	조건식 ? 값1 : 값2;

암호화 
	단방향 암호화
		평문 ---> 암호문
		* 평문을 암호문으로 암호화하는 알고리즘이다
		* 암호문을 다시 평문으로 복원할 수 없는 알고리즘이다.
	양방향 암호화
		평문 <---> 암호문
		* 평문을 암호문으로 암호화 할 수 있고,
		  암호문을 다시 평문으로 복호화 할 수 있다.
		* 암호화/복호화에는 키가 필요하다.
		
		- 대칭형 암호화 알고리즘
		* 암호화/복호화에 같은 키를 사용한다.
		* 암호화/복호화에 매번 다른 키를 사용하게 되면
		  복호화에 필요한 키를 네트워크를 통해서 상대방에게 전송해야 한다.
	        * 보안에 취약하다.
      - 비대칭형 암호화 알고리즘
        * 암호화/복호화에 서로 다른 키를 사용한다.
        * 공개키/개인키 암호화 알고리즘이 대표적인 비대칭형 암호화 알고리즘이다.
        * 공개키는 기관이 가지고 있다.
        * 개인키는 내가 가지고 있다.
        * 개인키로 암호화한 것은 공개키로 복호화할 수 있다.
        * 공개키로 암호화한 것은 개인키로 복호화할 수 있다.
                  * 복호화에 필요한 키를 네크워크를 통해서 전송할 필요가 없다.