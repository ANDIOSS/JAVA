# Map<K, V>

key, value의 쌍으로 값을 저장한다.

Entry<k,V>는 key value의 쌍을 표현하는 객체다.

K는 key의 타입, V는 value의 타입이다.

Map<K, V>은 여러 개의 Entry<K, V> 객체를 포함한다.

Map<K, V>객체에서 key값은 고유하다.

Map<K, V>객체에 정보를 저장할 때는 항상 key와 value를 같이 저장한다.

Map<K, V>객체는 key값을 이용해서 Value를 조회할 수 있다.

              key값을 이용해서 Entry<K, V>를 삭제할 수 있다.

Map<K, V>객체에 저장된 정보를 이용하기 위해서는 모든 사용자가 key를 알고 있어야 한다.

Map<K, V>객체에 정보를 저장하거나 정보를 사용할 때 반복문을 사용하지 않는다.

Map은 가변성이 높은 값을 담을때 사용한다 (여러가지 타입의 정보를 담을 때)

```java
		Map<String, String> map = new HashMap<String, String>();
		
		/*
		 * Map객체에 key, value 쌍 저장하기
		 * 
		 * Object put(K key, V value)
		 * 		- Map객체에 key, value 쌍을 저장한다.
		 * 		- key 값은 고유해야 한다.
		 * 		- 만약, key값이 중복되면 기존 값을 덮어쓴다.
		 */
		map.put("id", "hong");
		map.put("name", "홍길동");
		map.put("email", "hong@gmail.com");
		map.put("tel", "010-1111-1111");
		
		/*
		 * int size()
		 * 		- Map객체에 저장된 key, value쌍의 갯수를 반환한다.
		 */
		int size = map.size();
		System.out.println("저장된 개수: " + size);
		
		/*
		 * boolean containsKey(Object key)
		 * 		- Map객체에 지정된 key로 저장된 Entry가 있으면 true를 반환한다.
		 * 		- Map객체에 정보가 존재하는지 확인하는 용도로 사용하는 메소드다.
		 */
		 boolean exist = map.containsKey("name");
		System.out.println("키가 존재하는가? " + exist);
```

구분이 필요한 값, 가변성이 높은 값을 Map에 담는다.

if문을 제거할 수 있다.
