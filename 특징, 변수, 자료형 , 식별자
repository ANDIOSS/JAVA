변수와 자료형
연산자
제어문과 반복문
배열
***객체지향 프로그래밍
예외처리
java API
콜렉션 프레임워크
스레드와 네트워크
람다식과 스트림

자바의 특징
1. 플랫폼 독립적이다
		- 자바프로그램은 하드웨어/소프트웨어에 상관없이 모든 플랫폼에서 실행가능하다. 
		- 자바의 자료형 크기는 플랫폼에 상관없이 항상 일정한 크기를 가진다.
2. 객체지향프로그래밍 언어다.
		- 객체는 고유한 속성과 기능을 가지고 있는 부품이다.
		- 객체지향 프로그램은 고유한 속성과 기능을 가지고 있는 부품들을 조립해서 
		  하나의 완성된 애플리케이션을 만든다.
		- 객체지향 프로그램은 부품을 교체하기만 하면 되기때문에 재사용성, 유지보수성, 확장성이 매우 높다.
3. 비교적 배우기 쉽다.
4. 자동 메모리 관리를 지원한다.
		- 자바가상머신에는 메모리를 자동으로 관리하는 가비지콜렉터 프로그램이 실행중이다.
		- 가비지콜렉터는 메모리에서 더이상 사용하지 않는 객체들을 찾아서 삭제한다.
		- 자동 메모리 관리기능은 자바개발자의 메모리 관리부담을 경감시키고, 개발에만 집중할 수 있게한다.
5. 네트워크 및 분산처리를 지원한다.
		- 자바는 인터넷이 발명된 이후에 개발된 언어이기 때문에, 기본적으로 컴퓨터간의 통신기능을 지원하는 
		  클래스(설계도, Socket과 ServerSocket 등)가 포함되어 있다.
		- 자바가 제공하는 네트워크 관련 API를 이용하면 손쉽게 컴퓨터간의 통신을 구현할 수 있다.
6. 멀티스레드를 지원한다.
		- 스레드는 하나의 프로그램안에서 동시작업으 실행하기 위해서 사용하는 것이다.
		- 자바가 제공하는 클래스(설계도, Thread과 Runnable 등)을 이요하면 동시작업을 쉽게 구현할 수 있다.
7. 동적 로딩을 지원한다.

//정수형일때
1 byte = 8 bit
1 byte = 256가지를 표현 할 수 있다
8 bit 에서 첫번째 부분은 부호비트로 0이면 양수 1이면 음수를 표현함

//문자형일때
bit의 첫번째 부분을 부호비트로 사용하지 않음
char 2byte = 0 ~ 65535까지 표현 가능

컴퓨터에서 음수를 표현할때
1은 00000001
-1은 11111110

1의 보수 : 역전 시킨다음에 -1 한 것 // 역전이란 00000001을 11111110으로 바꾼 것
2의 보수 : 역전 시킨다음에 +1 한 것으로 부름 (음수를 표현) 

// 한번 더 찾아보기
2진수
16진수

소수는 정수처럼 완전 그 값을 표현하는게 아니라 그 값과 최대로 가까운 값을 표현한다.
ex) 0.1 + 0.2 = 0.30000000000000004

자료형과 같이 사용하면 생성
=은 대입(저장)
S.o.p (a) 이럴때 a는 사용이라고 한다.

변수 

변수의 생성
	자료형 변수명;                  <--------- 변수 생성
	자료형 변수명 = 값;             <--------- 변수 생성 및 초기화

변수의 초기화
	변수명 = 값;                   <--------- 변수의 초기화(변수에 값을 저장함)

변수의 이용
	출력에 이용함
	System.out.println(변수명);

	연산에 이용함
	System.out.println(변수명 + 변수명);

변수명은 식별자 
식별자는 구분 가능 -> 고유한 이름을 가지고있다.

식별자
	- 고유한 이름을 가지고 있는 것
	- 예시
		변수명, 메소드명, 클래스명, 패키지명 ....
	- 작성 규칙
		1. 예약어는 식별자로 사용할 수 없다.
			int class = 10;		// class가 예악어라 식별자로 사용이 불가능함
			int public = 1000;	// public이 예악어라 식별자로 사용이 불가능함
		2. 식별자는 문자로 사용해야 한다.
			int a = 10;
			int abc = 10;
			int 국어점수 = 70;
			int 1team = 100;	// 식별자는 숫자로 시작할 수 없다.
			int 2team = 200;	// 식별자는 숫자로 시작할 수 없다.
			
 			int team1 = 100;
			int team2 = 200;
		3. 식별자는 _와 $ 이외의 특수문자(!@#%^& 탭 문자 공백 등)을 포함할 수 없다.
	- 관례(Convention)
		1. 식별자가 두 단어 이상의 합성어일 때 두번째 단어의 첫번째 글자는 대문자로 적는다.
			int totalScore = 100;
			String departmentName = "영업팀";
			double discoutPriceRate = 0.01;

		2. 식별자 중에서 클래스 이름은 대문자로 시작한다.
			public class Student {
			
			}

			public class OrderService {
		
			}
		3. 프로그램이 실행되는 동안 값이 변하지 않는 상수의 이름은 전부 대문자로 적는다. //상수인 경우에만 _바를 사용하는데 이때는 다른 단어 두개가 합쳐져 있을때
			public static final int MAX_UPLOAD_SIZE = 500;

		4. 식별자 이름으로 약어의 사용은 지양하자.
			int studentScore = 100;
			int stdScr = 100;
		
		5. 식별자 이름은 변수인 경우 그 변수에 저장된 값을 잘 설명하는 이름이어야 한다.
			변수명인 경우 그 변수에 저장된 값을 잘 설명하는 이름이어야 한다.
				나쁜 변수명
				int a;			int b; int x; 
				int a1; 		int a2;
				
				좋은 변수명
				int totalScore; 	double discountPriceRate; 
				int userNo; 		int productNo; 
				String departmentNo;	
			메소드명인 경우 그 메소드의 기능을 잘 설명하는 이름이어야 한다.
			클래스명인 경우 그 클래스가 고유한 속성과 기능을 잘 드러내는 이름이어야 한다. //구체적이어야 한다
