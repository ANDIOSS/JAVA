게시글 정보를 표현하는 객체를 클래스로 정의하기
	게시글번호		- 정수	int
	게시글제목		- 문자열	String
	작성자아이디	- 문자열	String
	게시글내용 	- 문자열	String
	추천갯수		- 정수 	int
	리뷰갯수		- 정수	int
	리뷰평점		- 실수	double
	삭제여부		- 불린형	boolean
	작성날짜		- 날짜	Date <-- java.util.Date import
	수정날짜		- 날짜	Date
	삭제날짜		- 날짜	Date
* 클래스명 Post
* 멤버변수 정의하기
* 기본생성자 메소드 정의하기
* Getter /Setter 메소드 정의하기

StudentScoreApp
-표현 계층을 담당한다
-사용자와 상호작용하는 기능이 구현되어 있다.
 * 메뉴출력, 학생 성적정보 입력받기 등의 기능이 구현되어 있다.

1. 전체 조회 기능
 + 모든 학생의 성적정보를 조회해서 화면에 출력한다

2. 신규 성적정보 등록 기능
 + 학번, 이름, 국어, 영어, 수학점수를 입력받는다.
 + 입력받은 성적정보를 StudentScore객체에 담는다.
 + 서비스 계층을 담당하는객체에 StudentScore 객체를 전달해서 데이터베이스에 저장시킨다

3. 성적 정보 수정 기능
 + 수정할 학생의 학번을 입력받는다
 + 수정할 과목과 점수를 입력받는다
 + 서비스 계층을 담당하는 객체에 학번,과목,점수를 전달해서 성적정보를 수정하게 된다.

4. 성적 삭제 기능
 + 삭제할 학생의 학번을 입력받는다.
 + 서비스 계층을 담당하는 객체에 학번을 전달해서 성적정보를 삭제한다.

멤버변수로 담고 있어야한다

0. 객체 조립하기
	+ ScoreApp객체는 ScoreService객체에 정의된 기능을 사용한다.
	  즉,ScoreApp객체는 ScoreService 객체에 의존한다.
	  즉,ScoreApp 객체에 ScoreService 객체를 조립해야 한다.
	1. 사용하는 객체(ScoreApp)에 의존하는 객체(ScoreService)를 참조하는 참조변수를 정의한다.
	2. 의존하는 객체를 생성해서 참조변수에 대입한다.

	public class ScoreApp {
		// 0. 의존하는 객체를 조립하였다.
		private ScoreService service = new ScoreService();
	}

1. 신규 성적정보 저장하기
	ScoreApp 객체
	+ 학번, 이름, 국어, 영어, 수학 점수를 입력받는다.
	+ Score 객체를 생성해서 입력받은 학번, 이름, 국어, 영어, 수학 점수를 담는다.
	+ ScoreService 객체의 saveScore 메소드의 인자값을 Score객체를 전달해서 호출한다
	ScoreService 객체
	+ Score객체를 전달받아서 배열객체의 position 위치에 저장한다.
	+ position 변수의 값을 1증가시켜서 다음번 Score객체가 저장될 위치를 유지한다.
	
	public class ScoreApp{
		private ScoreService service = new ScoreService();
	
		void createScore() {
		// 키보드 입력을 읽어온다
		int no = Keyboard.reaInt();
		String name = Keyboard.readString();
		int kor = Keyboard.readInt();
		int eng = Keyboard.readInt();
		int math = Keyboard.reaInt();
		// Score객체를 생성해서 읽어온 값을 담는다
		Score score = new Score(no, name, kor, eng, math);
		// ScoreService의 saveScore 메소드에 Score객체를 전달해서 호출한다
		service.saveScore(score);
		}
	}

	public class ScoreService {
		// 성적정보를 최대 100개까지 저장가능한 배열객체를 생성한다.
		private Score[] database = new Score[100];
		// 배열의 몇번째 칸에 성적정보를 저장할지를 관리하는 변수를 정의한다.
		private int position = 0;

		void saveScore(Score score) {
			// 배열객체의 position번째 칸에 전달받은 성적정보객체를 저장한다.
			database[position] = score;
			// 다음 성적정보객체를 저장하기 위해서 1 증가시킨다
			position++;
		}
	}

2. 모든 성적정보 출력하기
	ScoreApp
	  + ScoreService객체의 getAllScores 메소드를 실행해서 성적정보 객체가 저장된 
	    배열객체를 반환받는다.
	  + 획득한 배열객체에서 순서대로 성적정보를 꺼내서 성적정볼르 화면에 출력한다.
	ScoreService 
	  + 모든 성적정보 객체가 저장된 배열 객체를 반환한다.
	
	public class ScoreApp {
		private ScoreService service = new ScoreService();
		
		void viewScores() {
			// ScoreService 객체의 getAllScores 메소드를 호출해서
			   성적정보가 저장된 배열객체를 반환받고, 참조변수에 대입한다
			score[] scores = service.getAllScores();
			// 향상된 for문을 이용해서 배열객체의 처음부터 끝까지
			   저장된 객체를 하나씩 꺼내서 반복처리한다.
			for (Score score: scores) {
				if (score == null) 
					break;
				}
				System.out.println(score.getNo());
				System.out.println(score.getName());
				System.out.println(score.getKor());
				System.out.println(score.getEng());
				System.out.println(score.getMath());
			}
		}
	}

	public class ScoreService {
		private Score[] database = new Score[100];
		private int position = 1;
		
		Score[] getAllScores() {	
			// 성적정보객체가 전부 저장된 배열객체를 반환한다.
			return database;	
		}

	}

3. 성적정보 수정하기
	ScoreApp
	  + 수정에 사용되는 정보(학번, 과목명, 점수)를 키보드로 입력받는다.
	  + ScoreService의 updateScore 메소드에 인자로 학번, 과목명, 점수를 전달하고
	    호출한다.
	ScoreService 
	  + 매개변수로 전달받은 학번과 일치하는 성적정보를 배열객체에서 찾는다.
	  + 일치하는 성적정보가 존재하지 않으면 메시지를 출력하고 메소드를 종료한다.
	  + 일치하는 성적정보가 존재하면, 매개변수로 전달받은 과목의 점수를 변경한다.
	
	public class ScoreApp {
		private ScoreService service = new ScoreService();

		void updateScore() {
			// 수정할 정보를 키보드로 입력받는다.
			int no = Keyboard.readInt();
			String subject = Keyboard.readString();
			int amount = Keyboard.readInt();
			
			// ScoreService객체의 updateScore 메소드에 인자로
			// 학번, 과목, 점수를 전달해서 호출한다.
			service.updateScore(no, subject, amount);
		}
	}

	public class ScoreService {
		private Score[] database = new Score[100];
		int position = 0;
		
		void updatScore(int no, String subject, int amount) {
			// 검색된 성적정보객체를 참조할 변수를 정의한다.
			Score foundScore = null;
			// 배열객체의 0번째부터 position위치 앞까지 배열객체에 저장된
			   Score객체를 하나씩 반복처리한다.
			for (int i = 0; i < position; i++) {
				Score Score = database[i];
				// 성적정보의 학번과 전달받은 학번이 일치하면 
				   해당 성적정보객체를 foundScore변수에 대입한다.
				if (score.getNo() == no){
					foundScore = score;
					break;
				}
			}
			// 검색된 성적정보가 null 이면 메시지를 출력하고
			   메소드 실행을 즉시 종료한다.		
			if (foundScore == null) {
				System.out.println("성적정보가 존재하지 않음");
				return;
			}
			// 과목명에 해당하는 점수를 변경한다.
			switch (subject) {
				case "국어" :
					foundScore.setKor(amount);
					break;
				case "영어" :
					foundScore.setKor(amount);
					break;
				case "수학" :
					foundScore.setKor(amount);
					break;
		}				
	}
4. 성적정보 삭제하기
	ScoreApp
	  + 삭제할 학번을 키보드로 입력받는다
	  + ScoreService객체의 deleteScore 메소드에 학번을 인자로 전달하고 호출한다.
	ScoreService 
	  + 삭제할 학번을 매개변수로 전달받는다.
	  + 성적정보객체가 저장된 배열객체에 전달받은 학번과 일치하는 성적정보객체가 저장된
	    위치를 조회한다.
	  + 해당 위치의 다음 칸부터 한 칸씩 앞으로 이동시킨다.
	  + position 값을 1 감소시키고, 해당 위치의 칸을 null로 변경한다
	    * 삭제 전 맨 마지막번째 객체가 저장되어 있던 곳을 null로 변경한 것이다.
	    * 맨 마지막번째 객체가 앞으로 한 칸 이동했기 때문에 원래 저장되어 있던 곳을 
	      null로 변경하는 것이다.

	public class ScoreApp {
		private ScoreService service = new ScoreService();
		
		void deleteScore() {
			// 삭제할 학번을 키보드로 입력받는다.
			int no = Keyboard.readInt();
			// ScoreService객체의 deleteScore 메소드에 인자로	
			   학번을 전달하고 호출한다.
			service.deleteScore(no);
		}
	}

	public class ScoreService {
		private Score[] database = new Score[100]
		private int position = 0;
		
	 	void deleteScore(int no) {
			// 전달받은 번호와 일치하는 성적정보가 저장된 위치를 담는 변수를 정의한다.
			int foundIndex = -1;
			// 배열의 0번째부터 position 앞까지 반복하면서
			   배열 객체에서 성적정보객체를 하나씩 가져온다.
			for (int i = 0; i < position; i++) {
				Score score = database[i];
				// 조회된 성적정보객체의 학번과 전달받은 학번이
				// 일치하면 해당 저장위치를 foundIndex에 대입한다.
				if (score.getNo() == no) {
					foundIndex = i;
					break;
				}
			}
			// foundIndex가 -1 이면 학번과 일치하는 성적정보가 존재하지
			   않으므로 메세지를 출력하고 메소드를 즉시 종료한다.
			if(foundIndex == -1) {
				System.out.println("성적정보가 존재하지 않습니다");
				return;
			}
			// i+1번째 칸의 객체를 i번째 칸에 복사한다.
			for (int i = foundIndex; i < position -1; i++) {
				database[i] = database[i+1];
			}
			// 다음번에 저장된 위치를 한칸 앞으로 이동시킨다.
			position--;
			// 매 마지막번째 성적정보가 저장되어 있던 칸을 null로 변경한다
			database[position] = null;
	}
