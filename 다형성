다형성(Polymorphism)은 이름과 같이 다양한 형태를 뜻한다
다형성은 하나의 객체가 다른 타입으로도 사용될 수 있다는 뜻이다 
다형성을 잘 사용하기 위해선 다형적 참조, 메소드 오버라이딩에 대해 알아봐야한다
다형적 참조란 부모 객체는 자식객체를 포함할 수 있다. 즉 Parent xxx = new Child()이렇게 포함할 수 있다는 것이다
이때 손자 객체가 있다면 손자객체도 포함할 수 있다 본인보다 상위 객체가 아니면 다 참조할 수 있다는 것이다.
하지만 이렇게하면 한계가 있다 바로 자식객체에 있는 메소드는 실행을 시킬 수 없다는 것이다. 이유는 우리가
Parent xxx = new Child() 이렇게했을 때 xxx를 눌러보면 Parent 타입이기 때문에 Parent 클래스로 가서 찾는다 하지만 
Parent 클래스에는 childMethod가 없기 때문에 메소드를 실행할 수 없어 오류가 발생하다 
이것을 가능하게 하기 위해서 캐스팅이 필요하다 우리가 기본형 타입할때 int xxx = (int) 3.14 이렇게 더블형 타입을 인트형에
집어넣기 위해 했던 것처럼 하는 것을 뜻한다 여기서는 부모객체 타입을 자식 객체로 내리는 것이라 다운캐스팅이라 부른다
우리가 한번만 호출할 경우인데도 객체를 업/다운 캐스팅하는 코드를 계속 추가하게되면 귀찮을 것이다 이때를 위해서
일시적 다운 캐스팅이 가능하다 쓰는 방법은 앞에 기본형 타입처럼 (Child) parent타입 변수 xxx).childMethod();
이렇게 사용하면 된다.
업캐스팅은 우리가 다운캐스팅처럼 명시적으로 계속 써줘야할 필요는 없다 업캐스팅은 안전한 방법이기 때문이다
우리가 객체를 생성할 때 해당 부모 타입은 모두 함께 생성되고 업캐스팅은 밑에 상속받은 객체부터 위로 단계적으로 찾아 나가는 방식이기 때문에 
위험성이 적지만 다운캐스팅은 부모타입이 자식타입의 것을 찾는 것이기에 오류가 발생할 확률이 높아 명시적으로 적어줘야한다.

instanceof
다형서에서 참조형 변수는 이름 그대로 다양한 자식을 참조할 수 있다. 참조하는 대상이 다양하기 때문에 어떤 인스턴스를 참조하고 있는지
확인해야할 때 쓰는 키워드가 바로 instanceof 키워드다
instanceof 사용예제)
Child instanceof Parent  <- 오른쪽 대싱의 자식 타입을 왼쪽에서도 참조하는 경우에 true를 반환한다.
이때는 parent가 child의 인스턴스를 참조하기 때문에 true를 반환한다.

메소드 오버라이딩
우리가 지금껏 해왔던 메소드 오버라이딩은 반쪽짜리와 다름없었다 사실 다형성과 같이 사용하면 엄청난 위력을 발휘하기 때문에 잠깐 겉에만
배우는 것이었다. 
자식 객체에서 부모타입의 객체의 메소드를 재정의하면 우리가 위에서 다운 캐스팅을 하더라도 자식객체의 메소드를 부르지 못했는데
이제 부를 수 있게 된다 왜냐면 메소드 오버라이딩을 하면 우선권을 가지기 때문에 부모 객체에 똑같은 메소드가 있더라도 자식 객체의 
메소드를 실행하는 것이다.
