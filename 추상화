추상화 

모든 자식(구현) 클래스가 반드시 구현해야하는 기능을 추상메소드로 정의하는 것이다.

재정의를 강제하기 위해서

모든 자식 클래스의 해당 기능의 사용법을 통일 시키기 위해서 (같은 이름으로 정의)

abstract를 사용하는 것을 추상화라고 한다.

### 추상화를 사용하는 목적

- 같은 목적의 기능이지만 구현 클래스마다 구현내용이 서로 다른 기능을 하나의 일관된

       메소드 형태로 구현하게 한다.

- 메소드 재정의를 강제한다.(클래스 형변환에 유리)
- 모든 구현클래스에서 해당 기능의 사용법을 통일시킨다.

### 추상 클래스

- abstrac 키워드가 지정된 클래스
- 추상 메소드를 보유할 수 있다.
- 구현 메소드를 보유할 수 있다.
- 추상 클래스는 하위 구현 클래스가 직접 구현할 내용을 추상화 할 수 있다.
- 추상화 - 구현부가 없는 추상 메소드를 정의하고, 하위 구현 클래스에서 추상 메소드를 재정의해서 구체적인 실행방법을 구현하도록 한 것이다.
- new 키워드를 이용해서 객체를 생성할 수 없다.

### **구현 클래스**

- abstract 키워드를 지정하지 않은 클래스다.
- 추상메소드를 보유할 수 없다.
- 구현메소드를 보유할 수 있다
- 구현 클래스가 부모 클래스로부터 추상메소드를 상속받았다면 받드시 메소드 재정의를 이용해서 추상메소드와 똑같은 메소드형식으로 메소드를 구현해야한다.
- 추상클래스에서는 하위 구현클래스가 직접구현할 기능을 추상메소드로 추상화함으로써 하위 구현클래스에게 메소드 재정의를 강제하게 한다. (반드시 구체적인 기능을 구현하게 한다.)
- new 키워드를 이용해서 객체를 생성할 수 있다.

### 구현 메소드

- 메소드가 바디부를 가지고 있으면 구현 메소드다.
- 메소드의 구성
    
    ```java
    [ 접근제한자     반환타입     메소드명(타입 매개변수)  ] //Header
    {                                                    //Body 
    																										 //Body
    }                                                    //Body
    ```
    

### 추상메소드

- abstract 키워드가 지정된 메소드다.
- 메소드가 바디부를 가지고 있지 않은 메소드다.

### 추상화 방법

1. 추상메소드와 구현메소드가 모두 포함된 경우
- 추상클래스를 이용한 추상화
    - 하위 구현클래스에 구현하는 기능 중에서 특정 기능은 하위 구현클래스에 상관없이 모두    동일한 경우 해당 기능을 미리 추상클래스에 구현메소드로 구현하는 것이 좋다.
    - 하위 구현클래스의 구현부담을 감소시킨다.
    - 예시
        - 차트 구현 클래스에서 구현 클래스에 상관없이 차트의 제목은 차트의 상단 중앙에, 범례는 차트의 오른쪽에 표시된다. 따라서, 차트제목과 범례를 출력하는 기능은 공통으로    사용할 수 있으므로 부모 클래스(추상클래스)에서 미리 구현하는 것이다.

```java
public abstract class Chart {
	public abstract void draw();
	public void drawTitle() { ... }
	public void drawLegend() { ... }
}
```

1. 추상메소드만 포함되는 경우
- 인터페이스를 이용한 추상화
    - 하위 구현클래스가 반드시 구현할 기능을 전부 추상화하는 것이다.
    - 하위 구현클래스가 구현할 기능에 대한 **표준**이 정의되어 있다.
    - 하위 구현클래스가 구현할 기능에 대해 **규격**이 정의되어 있다.
    - 하위 구현클래스가 구현할 기능에 대한 **스펙**이 정의되어 있다.
    
    ```java
    // 추상클래스로만 정의한 경우
    public abstract class Car {
    	public abstract void drive();
    	public abstract void stop();
    	public abstract void speedUp();
    	public abstract void speedDown();
    }
    ```
    
    ```java
    // 인터페이스를 활용한 경우 
    // public abstract를 생략 가능
    public interface Car{
    	void drive();
    	void stop();
    	void speedUp();
    	void speedDown();
    
    }
    ```
    
    클래스는 구현체 인터페이스는 표준 규격
    
    규격을 먼저 만들고 클래스를 만든다
    
    클래스는 단일상속이다.
    
    인터페이스는 다중상속을 지원한다.
    
    클래스는 여러 개의 인터페이스를 구현할 수 있다.
    
    인터페이스는 상수, 추상메소드로 구성된다.
